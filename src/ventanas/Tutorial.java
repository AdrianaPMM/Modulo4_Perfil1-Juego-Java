/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ventanas;

import fonts.Fuentes;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.SwingConstants;

/**
 *
 * @author Paola Mejia
 */
public class Tutorial extends javax.swing.JPanel implements Runnable {

    //FPS
    int FPS = 60;
    
    KeyHandler KeyH = new KeyHandler();
    
    Fuentes tipoFuentes;
    Thread gameThread;
     
    //final int originalTileSize = 50;
    //final int scale = 2;
        
   final int tileSize1 = 200;
    final int tileSizeW1 = 160;
    
    final int tileSize2 = 200;
    final int tileSizeW2 = 130;
     
    //Posision por defecto de los jugadores
    int playerCabraX = 100;
    int playerCabraY = 470;
            
    int playerAranaX = 250;
    int playerAranaY = 500;
    
    int Player2Speed = 6;
    
    public Tutorial() { 
        initComponents();
        fontDesign();
        this.addKeyListener(KeyH);
        this.setFocusable(true);
        this.requestFocusInWindow();
        this.requestFocus();
    }

    public void startGameThread()
    {
        gameThread = new Thread(this);
        gameThread.start();
    }
    
     private void fontDesign()
    {      
        //tipoFuentes = new Fuentes();
       // jLabel1.setFont(tipoFuentes.fuente(tipoFuentes.DMSans, 0, 35));
        //jLabel1.setHorizontalAlignment(SwingConstants.CENTER);

       
        //btnSiguiente1.setText("<html><font color='white'> Siguiente </font></html>");
        //caracBtn(btnSiguiente1);
    }
        
    
    private void caracBtn(JButton btn)
    {
        btn.setFont((tipoFuentes.fuente(tipoFuentes.KoHoRegular, 0, 40)));
        btn.setHorizontalTextPosition(JButton.CENTER);
        btn.setVerticalTextPosition(JButton.CENTER);
        btn.setVerticalAlignment(JButton.CENTER);
        btn.setHorizontalAlignment(JButton.CENTER); 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(51, 51, 51));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
    }// </editor-fold>//GEN-END:initComponents

    //public JButton getBtnSiguiente()
    //{
        //return btnSiguiente1;
    //}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        
        while(gameThread != null)
        {
            double drawInterval = 1000000000/FPS; //0.01666
            double nextDrawTime = System.nanoTime() + drawInterval;
            
            //Se usara para actualizar la posicion de los personajes en el juego
            Update();
            //Y para "dibujar" en la pantalla la informacion actualizada
            repaint();
            
            try {
                
                double remainingTime = nextDrawTime - System.nanoTime();
                remainingTime = remainingTime/1000000;
                
                if(remainingTime < 0)
                {
                    remainingTime = 0;
                }
                
                Thread.sleep((long)remainingTime);
                
                nextDrawTime += drawInterval;
                
            } catch (InterruptedException ex) {
                Logger.getLogger(Tutorial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    public void Update()
    {
        //Controles de CABRA
        if(KeyH.upPressed == true)
        {
            playerCabraY = playerCabraY - 5;
        }
        else if (KeyH.rightPressed)
        {
            playerCabraX += Player2Speed;
        }
        else if (KeyH.leftPressed)
        {
            playerCabraX -= Player2Speed;
        }
        
        //Controles de ARANA
          if(KeyH.upPressedW == true)
        {
            playerAranaY = playerAranaY - 5;
        }
        else if (KeyH.rightPressedD)
        {
            playerAranaX += Player2Speed;
        }
        else if (KeyH.leftPressedA)
        {
            playerAranaX -= Player2Speed;
        }
    }
    
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
             
        //Cabra
        Graphics2D g2 = (Graphics2D)g;
        g2.setColor(Color.white);
        g2.fillRect(playerCabraX, playerCabraY, tileSize1, tileSizeW1);
        
        //Arana
        Graphics2D g4 = (Graphics2D)g;
        g4.setColor(Color.red);
        g4.fillRect(playerAranaX, playerAranaY, tileSize2, tileSizeW2);
        
        g2.dispose();
        g4.dispose();
    }
}
